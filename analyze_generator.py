#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π makefilm.ai
"""

import asyncio
from playwright.async_api import async_playwright

async def analyze_image_generator():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    """
    print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π makefilm.ai...")
    
    try:
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ
            browser = await p.chromium.launch(headless=False)
            context = await browser.new_context()
            page = await context.new_page()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            try:
                with open('cookies.json', 'r') as f:
                    import json
                    cookies = json.load(f)
                    await context.add_cookies(cookies)
                    print("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except:
                print("‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ https://makefilm.ai/workspace/image-generator...")
            await page.goto("https://makefilm.ai/workspace/image-generator", wait_until='networkidle')
            await page.wait_for_timeout(5000)
            
            print("\n" + "="*60)
            print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ –ì–ï–ù–ï–†–ê–¢–û–†–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
            print("="*60)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = await page.title()
            print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            # –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            print("\nüìù –ü–û–õ–Ø –í–í–û–î–ê:")
            input_elements = await page.query_selector_all('input, textarea, [contenteditable="true"]')
            
            for i, element in enumerate(input_elements):
                try:
                    tag_name = await element.evaluate('el => el.tagName')
                    input_type = await element.get_attribute('type')
                    placeholder = await element.get_attribute('placeholder')
                    class_name = await element.get_attribute('class')
                    id_name = await element.get_attribute('id')
                    
                    print(f"  {i+1}. {tag_name}")
                    if input_type:
                        print(f"     –¢–∏–ø: {input_type}")
                    if placeholder:
                        print(f"     Placeholder: {placeholder}")
                    if class_name:
                        print(f"     –ö–ª–∞—Å—Å: {class_name}")
                    if id_name:
                        print(f"     ID: {id_name}")
                    print()
                except:
                    pass
            
            # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            print("\nüîò –ö–ù–û–ü–ö–ò:")
            button_elements = await page.query_selector_all('button, input[type="submit"], input[type="button"]')
            
            for i, element in enumerate(button_elements):
                try:
                    text = await element.inner_text()
                    class_name = await element.get_attribute('class')
                    id_name = await element.get_attribute('id')
                    button_type = await element.get_attribute('type')
                    
                    if text.strip():  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
                        print(f"  {i+1}. –¢–µ–∫—Å—Ç: '{text.strip()}'")
                        if button_type:
                            print(f"     –¢–∏–ø: {button_type}")
                        if class_name:
                            print(f"     –ö–ª–∞—Å—Å: {class_name}")
                        if id_name:
                            print(f"     ID: {id_name}")
                        print()
                except:
                    pass
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print("\nüîó –°–°–´–õ–ö–ò –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
            link_elements = await page.query_selector_all('a')
            
            image_links = []
            for element in link_elements:
                try:
                    href = await element.get_attribute('href')
                    if href and any(ext in href.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp', 'image', 'photo']):
                        image_links.append(href)
                        print(f"  ‚Ä¢ {href}")
                except:
                    pass
            
            if not image_links:
                print("  –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
            
            print("\n" + "="*60)
            print("üìã –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –°–ï–õ–ï–ö–¢–û–†–´:")
            print("="*60)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            print("\n–î–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞:")
            print('prompt_input_selector = "input[type=\\"text\\"]"')
            print('prompt_input_selector = "textarea"')
            print('prompt_input_selector = "[contenteditable=\\"true\\"]"')
            
            print("\n–î–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            print('generate_button_selector = "button[type=\\"submit\\"]"')
            print('generate_button_selector = "button:has-text(\\"Generate\\")"')
            print('generate_button_selector = "button:has-text(\\"Create\\")"')
            
            print("\n–î–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print('result_selectors = ["a[href*=\\"image\\"]", "a[href*=\\"jpg\\"]", "a[href*=\\"png\\"]"]')
            
            print("\n" + "="*60)
            print("üìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
            print("="*60)
            print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")
            print("2. –í—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª bot.py –≤–º–µ—Å—Ç–æ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            print("3. –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç:")
            print("   - F12 ‚Üí Elements ‚Üí –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ")
            print("   - Copy ‚Üí Copy selector")
            print("="*60)
            
            # –ñ–¥–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            await browser.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(analyze_image_generator())
